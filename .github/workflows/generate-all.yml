
name: Generate AST, AstBuilder, Interpreter

on:
  push:
    paths:
      - 'grammar/**'
      - 'tools/AstGenerator.java'
      - 'tools/AstBuilderGenerator.java'
      - 'tools/InterpreterTemplateGenerator.java'
      - '.github/workflows/generate-all.yml'
    branches: [main]

permissions:
  contents: write

jobs:
  generate-and-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check for required files
        run: |
          REQUIRED=(
            grammar/DanexLexer.g4
            grammar/DanexParser.g4
            tools/AstGenerator.java
            tools/AstBuilderGenerator.java
            tools/InterpreterTemplateGenerator.java
          )

          MISSING=0
          for file in "${REQUIRED[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              MISSING=1
            fi
          done

          if [ $MISSING -eq 1 ]; then
            echo "❌ Aborting due to missing required files."
            exit 1
          fi

      - name: Cache ANTLR runtime JAR
        uses: actions/cache@v3
        with:
          path: lib/antlr-4.9.2-complete.jar
          key: antlr-runtime-v4.9.2

      - name: Ensure ANTLR runtime JAR present
        run: |
          mkdir -p lib
          if [ ! -f lib/antlr-4.9.2-complete.jar ]; then
            echo "Downloading ANTLR runtime..."
            curl -L -o lib/antlr-4.9.2-complete.jar https://www.antlr.org/download/antlr-4.9.2-complete.jar
          else
            echo "Using cached ANTLR runtime."
          fi

      - name: Generate ANTLR Lexer & Parser for local use
        run: |
          mkdir -p src/generated bin/parser-bin
          java -jar lib/antlr-4.9.2-complete.jar \
            -Dlanguage=Java \
            -o src/generated \
            -package danex.antlr \
            grammar/DanexLexer.g4

          if [ -f src/generated/grammar/DanexLexer.tokens ]; then
            cp src/generated/grammar/DanexLexer.tokens src/generated/
          fi

          java -jar lib/antlr-4.9.2-complete.jar \
            -Dlanguage=Java \
            -o src/generated \
            -package danex.antlr \
            -lib src/generated \
            grammar/DanexParser.g4

      - name: Compile ANTLR-generated sources
        run: |
          find src/generated -name "*.java" > parser-sources.txt
          if [ ! -s parser-sources.txt ]; then
            echo "❌ No ANTLR-generated Java files found."
            exit 1
          fi
          javac -cp lib/antlr-4.9.2-complete.jar -d bin/parser-bin @parser-sources.txt
          jar cf parser.jar -C bin/parser-bin .

      - name: Generate AST Classes
        run: |
          mkdir -p src/danex/ast bin/ast-gen
          javac -cp "parser.jar:lib/antlr-4.9.2-complete.jar" -d bin/ast-gen tools/AstGenerator.java
          java -cp "bin/ast-gen:parser.jar:lib/antlr-4.9.2-complete.jar" tools.AstGenerator

      - name: Generate AstBuilder
        run: |
          javac -d bin tools/AstBuilderGenerator.java
          java -cp bin tools.AstBuilderGenerator

      - name: Generate Interpreter skeleton
        run: |
          javac -cp "bin:parser.jar:lib/antlr-4.9.2-complete.jar" -d bin tools/InterpreterTemplateGenerator.java
          java -cp "bin:parser.jar:lib/antlr-4.9.2-complete.jar" tools.InterpreterTemplateGenerator

      - name: Show generated files
        run: |
          echo "AST classes:"
          ls src/danex/ast/*.java || echo "(none)"
          echo "AstBuilder:"
          ls src/danex/AstBuilder.java || echo "(none)"
          echo "Interpreter:"
          ls src/danex/Interpreter.java || echo "(none)"

      - name: Commit generated code if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Ensure a clean index: unstage everything
          git reset

          # Stage only the generated files
          git add src/danex/ast src/danex/AstBuilder.java src/danex/Interpreter.java

          # If nothing changed, skip commit
          if git diff --cached --quiet; then
            echo "No generated changes to commit."
            exit 0
          fi

          # Commit on top of current HEAD (which Actions checked out)
          git commit -m "chore: regenerate AST, AstBuilder, Interpreter [skip ci]"

          # Push with retry logic: if remote advanced, rebase this single commit then retry
          max_attempts=3; attempt=1
          until git push origin HEAD:main; do
            if [ $attempt -ge $max_attempts ]; then
              echo "❌ Push failed after $attempt attempts."
              exit 1
            fi
            echo "⚠️ Push failed (remote may have advanced). Fetching and rebasing..."
            git fetch origin main
            git rebase origin/main
            attempt=$((attempt+1))
          done
